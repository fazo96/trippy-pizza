version: '3.4'

services:
  bitwarden:  
    image: vaultwarden/server:latest
    restart: always
    ports:
      - 8002:80
    volumes:
      - ${DATA}/bitwarden:/data/
    environment:
      - DOMAIN=https://bitwarden.${DOMAIN}
  syncthing:  
    image: linuxserver/syncthing:amd64-latest
    restart: always
    volumes:
      - ${DATA}/syncthing/folders:/folders
      - ${DATA}/syncthing/config:/config
    ports:
      - 22000:22000
      - 8003:8384
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Rome
  nextcloud_db:
    image: postgres:12
    restart: always
    volumes:
      - ${DATA}/nextcloud/postgresql/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=nextcloud
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
  nextcloud:  
    image: nextcloud:apache
    restart: always
    volumes:
      - ${DATA}/nextcloud/html:/var/www/html
    ports:
      - 8001:80
    environment:
      - POSTGRES_HOST=nextcloud_db
      - POSTGRES_PASSWORD=nextcloud
      - POSTGRES_DATABASE=nextcloud
      - POSTGRES_USER=nextcloud
      - OVERWRITEPROTOCOL=https
    links:
      - nextcloud_db
    depends_on:
      - nextcloud_db 
  transmission:
    image: linuxserver/transmission
    restart: always
    volumes:
      - ${DATA}/transmission/config:/config
      - ${DOWNLOAD}:/downloads
    ports:
      - 8004:9091
      - "51413:51413"
      - "51413:51413/udp"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Rome
  filebrowser:
    image: filebrowser/filebrowser
    user: 1000:1000
    ports:
      - 8005:8000
    volumes:
      - ${DATA}/filebrowser/config.json:/.filebrowser.json
      - ${DATA}/filebrowser/database.db:/database.db
      - ${FILES}:/srv
  hass:
    image: homeassistant/home-assistant:stable
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime
      - ${DATA}/hass/config:/config
    network_mode: host
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
# valheim:
#   image: lloesche/valheim-server
#   restart: always
#   stop_grace_period: 2m
#   cap_add:
#     - sys_nice
#   volumes:
#     - ${DATA}/valheim/config:/config
#     - ${DATA}/valheim/data:/opt/valheim
#   ports: 
#     - "2456-2457:2456-2457/udp"
#     - "9001:9001/tcp"
#   environment:
#     - SERVER_NAME=Trippy Pizza
#     - WORLD_NAME=Primo
#     - SERVER_PASS=amogus
#     - SERVER_PUBLIC=false
# minecraft:
#   image: itzg/minecraft-server
#   ports:
#     - "25565:25565"
#     - "19132:19132/udp"
#   restart: always
#   environment:
#     EULA: "TRUE"
#     MEMORY: "3G"
#     VIEW_DISTANCE: 15
#     OPS: fazo96
#     MOTD: "Trippy Pizza"
#     TYPE: Fabric
#   volumes:
#     - ${DATA}/minecraft/data:/data
#     - ${DATA}/minecraft/mods:/mods
  foodiepad:
    build: ../foodiepad
    ports:
      - "3000:3000"
    restart: always
#  barotrauma:
#    image: goldfish92/barotrauma-dedicated-server
#    ports:
#      - "27015-27016:27015-27016/udp"
#    volumes:
#      - ${DATA}/barotrauma/saves:/home/steam/.local/share/Daedalic Entertainment GmbH/Barotrauma/Multiplayer
#    environment:
#      - BAR_PASSWORD=amogus
#      - BAR_NAME=Sottomarigno
#      - BAR_PERMISSIONS=Fazo:76561198001126658:All
#      # More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    # - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      - "8007:80/tcp"
    environment:
      TZ: 'Europe/Rome'
      WEBPASSWORD: 'n0suchp4ssw0rd'
      VIRTUAL_HOST: 'pihole.trippy.pizza'
    volumes:
      - '${DATA}/pihole/etc-pihole:/etc/pihole'
      - '${DATA}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
   # https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
   # cap_add:
   #  - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: always
  lemmy-proxy:
    image: nginx:1-alpine
    ports:
      # only ports facing any connection from outside
      - 8008:80
    volumes:
      - ./config/lemmy/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: always
    depends_on:
      - pictrs
      - lemmy-ui
      - lemmy

  lemmy:
    image: dessalines/lemmy:0.19.3
    hostname: lemmy
    restart: always
    environment:
      - RUST_LOG="warn,lemmy_server=info,lemmy_api=info,lemmy_api_common=info,lemmy_api_crud=info,lemmy_apub=info,lemmy_db_schema=info,lemmy_db_views=info,lemmy_db_views_actor=info,lemmy_db_views_moderator=info,lemmy_routes=info,lemmy_utils=info,lemmy_websocket=info"
    volumes:
      - ./config/lemmy/lemmy.hjson:/config/config.hjson
    depends_on:
      - lemmy-postgres
      - pictrs

  lemmy-ui:
    image: dessalines/lemmy-ui:0.19.3
    environment:
      # this needs to match the hostname defined in the lemmy service
      - LEMMY_UI_LEMMY_INTERNAL_HOST=lemmy:8536
      # set the outside hostname here
      - LEMMY_UI_LEMMY_EXTERNAL_HOST=lemmy.trippy.pizza:443
      - LEMMY_HTTPS=true
    depends_on:
      - lemmy
    restart: always

  pictrs:
    image: asonix/pictrs:0.3.1
    # this needs to match the pictrs url in lemmy.hjson
    hostname: pictrs
    # we can set options to pictrs like this, here we set max. image size and forced format for conversion
    # entrypoint: /sbin/tini -- /usr/local/bin/pict-rs -p /mnt -m 4 --image-format webp
    environment:
      - PICTRS__API_KEY=API_KEY
    user: 991:991
    volumes:
      - ${DATA}/pictrs:/mnt
    restart: always

  lemmy-postgres:
    image: postgres:15-alpine
    # this needs to match the database host in lemmy.hson
    hostname: postgres
    environment:
      - POSTGRES_USER=lemmy
      - POSTGRES_PASSWORD=lemmy
      - POSTGRES_DB=lemmy
    volumes:
      - ${DATA}/lemmy/postgres:/var/lib/postgresql/data
    restart: always

  dendrite-postgres:
    image: postgres:15-alpine
    restart: always
    volumes:
      - ${DATA}/dendrite/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: itsasecret
      POSTGRES_USER: dendrite
      POSTGRES_DATABASE: dendrite
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dendrite"]
      interval: 5s
      timeout: 5s
      retries: 5

  dendrite:
    image: matrixdotorg/dendrite-monolith:latest
    ports:
      - 8010:8008
      - 8448:8448
    volumes:
      - ${DATA}/dendrite/config:/etc/dendrite
      - ${DATA}/dendrite/media:/var/dendrite/media
      - ${DATA}/dendrite/jetstream:/var/dendrite/jetstream
      - ${DATA}/dendrite/search_index:/var/dendrite/searchindex
    depends_on:
      - dendrite-postgres
    restart: unless-stopped

  calibre-web:
    image: linuxserver/calibre-web:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - /${DATA}/calibre-web/config:/config
      - /${DATA}/calibre-web/library:/books
    ports:
      - 8083:8083
    restart: unless-stopped
  firefox-sync-server:
    image: mozilla/syncserver:latest
    volumes:
        - ${DATA}/firefox-sync-server:/data
    ports:
        - 8084:8084
    environment:
        SYNCSERVER_PUBLIC_URL: 'https://firefoxsyncserver.trippy.pizza'
        SYNCSERVER_SECRET: 'n0suchp4ssw0rd'
        SYNCSERVER_SQLURI: 'sqlite:////data/syncserver.db'
        SYNCSERVER_BATCH_UPLOAD_ENABLED: 'true'
        SYNCSERVER_FORCE_WSGI_ENVIRON: 'true'
        PORT: '8084'
    restart: always
